[{"/Users/blairyoung/Desktop/park-planner/client/src/index.js":"1","/Users/blairyoung/Desktop/park-planner/client/src/App.js":"2","/Users/blairyoung/Desktop/park-planner/client/src/pages/SavedBooks.js":"3","/Users/blairyoung/Desktop/park-planner/client/src/pages/SearchBooks.js":"4","/Users/blairyoung/Desktop/park-planner/client/src/components/Navbar.js":"5","/Users/blairyoung/Desktop/park-planner/client/src/components/LoginForm.js":"6","/Users/blairyoung/Desktop/park-planner/client/src/components/SignupForm.js":"7","/Users/blairyoung/Desktop/park-planner/client/src/utils/mutations.js":"8","/Users/blairyoung/Desktop/park-planner/client/src/utils/queries.js":"9","/Users/blairyoung/Desktop/park-planner/client/src/utils/auth.js":"10","/Users/blairyoung/Desktop/park-planner/client/src/utils/localStorage.js":"11","/Users/blairyoung/Desktop/park-planner/client/src/pages/Home/Parks/parks.js":"12","/Users/blairyoung/Desktop/park-planner/client/src/pages/Home/Parks/ParkCard.js":"13","/Users/blairyoung/Desktop/park-planner/client/src/pages/Banner.js":"14","/Users/blairyoung/Desktop/park-planner/client/src/pages/Home/Home.js":"15"},{"size":265,"mtime":1657655215264,"results":"16","hashOfConfig":"17"},{"size":1754,"mtime":1657656614071,"results":"18","hashOfConfig":"17"},{"size":2555,"mtime":1657068071978,"results":"19","hashOfConfig":"17"},{"size":4856,"mtime":1657656039243,"results":"20","hashOfConfig":"17"},{"size":2520,"mtime":1657655431458,"results":"21","hashOfConfig":"17"},{"size":2784,"mtime":1657589717121,"results":"22","hashOfConfig":"17"},{"size":3617,"mtime":1657590149023,"results":"23","hashOfConfig":"17"},{"size":1058,"mtime":1657068071979,"results":"24","hashOfConfig":"17"},{"size":250,"mtime":1657068071979,"results":"25","hashOfConfig":"17"},{"size":1234,"mtime":1657068071978,"results":"26","hashOfConfig":"17"},{"size":793,"mtime":1657068071979,"results":"27","hashOfConfig":"17"},{"size":2326,"mtime":1657655182207,"results":"28","hashOfConfig":"17"},{"size":1097,"mtime":1657651484510,"results":"29","hashOfConfig":"17"},{"size":1496,"mtime":1657656138507,"results":"30","hashOfConfig":"17"},{"size":265,"mtime":1657656473641,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1q0xzyj",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/blairyoung/Desktop/park-planner/client/src/index.js",[],["65","66"],"/Users/blairyoung/Desktop/park-planner/client/src/App.js",["67"],"/Users/blairyoung/Desktop/park-planner/client/src/pages/SavedBooks.js",["68","69"],"import React from 'react';\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from 'react-bootstrap';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { removeBookId } from '../utils/localStorage';\n\nimport Auth from '../utils/auth';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({\n        variables: { bookId },\n      });\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing {userData.username}'s books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks?.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? 'book' : 'books'\n              }:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks?.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","/Users/blairyoung/Desktop/park-planner/client/src/pages/SearchBooks.js",["70","71"],"import React, { useState, useEffect } from 'react';\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nimport Auth from '../utils/auth';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}`\n      );\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { bookData: { ...bookToSave } },\n      });\n      console.log(savedBookIds);\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedId) => savedId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some((savedId) => savedId === book.bookId)\n                        ? 'Book Already Saved!'\n                        : 'Save This Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;","/Users/blairyoung/Desktop/park-planner/client/src/components/Navbar.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/components/LoginForm.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/components/SignupForm.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/utils/mutations.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/utils/queries.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/utils/auth.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/utils/localStorage.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/pages/Home/Parks/parks.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/pages/Home/Parks/ParkCard.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/pages/Banner.js",[],"/Users/blairyoung/Desktop/park-planner/client/src/pages/Home/Home.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":11,"column":8,"nodeType":"78","messageId":"79","endLine":11,"endColumn":19},{"ruleId":"76","severity":1,"message":"80","line":19,"column":24,"nodeType":"78","messageId":"79","endLine":19,"endColumn":29},{"ruleId":"76","severity":1,"message":"81","line":33,"column":15,"nodeType":"78","messageId":"79","endLine":33,"endColumn":19},{"ruleId":"76","severity":1,"message":"80","line":27,"column":22,"nodeType":"78","messageId":"79","endLine":27,"endColumn":27},{"ruleId":"76","severity":1,"message":"81","line":82,"column":15,"nodeType":"78","messageId":"79","endLine":82,"endColumn":19},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'SearchBooks' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]